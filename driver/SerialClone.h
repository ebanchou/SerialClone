// SerialClone.h
//
// Generated by C DriverWizard 3.2.0 (Build 2485)
// Requires DDK Only
// File created on 9/16/2005
//
#ifndef __SERIALCLONE_H__
#define __SERIALCLONE_H__


#define DRIVERNAME "SerialClone"				// for use in messages
#define LDRIVERNAME L"SerialClone"				// for use in UNICODE string constants

// define this PnP IRP.  This IRP is only defined in ntddk.h normally
#if !defined(IRP_MN_QUERY_LEGACY_BUS_INFORMATION)
#define IRP_MN_QUERY_LEGACY_BUS_INFORMATION     0x18
#endif // IRP_MN_QUERY_LEGACY_BUS_INFORMATION

// Memory allocation pool tag
#define SERIALCLONE_POOL_TAG 'ireS'

// Make all pool allocations tagged
#undef ExAllocatePool
#define ExAllocatePool(type, size) \
    ExAllocatePoolWithTag(type, size, SERIALCLONE_POOL_TAG);

// queue start io callback
typedef VOID (*PSERIALCLONE_QUEUE_STARTIO)(
    IN PDEVICE_OBJECT   DeviceObject,
    IN PIRP             Irp 
    );

// irp queue type definition
typedef struct _SERIALCLONE_QUEUE
{
    PSERIALCLONE_QUEUE_STARTIO StartIoRoutine;
    PDEVICE_OBJECT  DeviceObject;
    LIST_ENTRY      IrpQueue;
    KSPIN_LOCK      QueueLock;
    PIRP            CurrentIrp;
    KEVENT          StopEvent;
    LONG            StallCount; 
    NTSTATUS        ErrorStatus;
    KDPC            SerialCloneStartIoDpc;
    BOOLEAN         bUseSerialCloneStartIoDpc;
} SERIALCLONE_QUEUE, *PSERIALCLONE_QUEUE;

// cancel-safe irp list type definition
typedef struct _SERIALCLONE_LIST
{
    PDEVICE_OBJECT  DeviceObject;
    LIST_ENTRY      IrpList;
    KSPIN_LOCK      ListLock;
	PIRP			SpunIRP;
    NTSTATUS        ErrorStatus;
} SERIALCLONE_LIST, *PSERIALCLONE_LIST;

// stall IRP list to syncronize Pnp, Power with
// the rest of IO
typedef struct _SERIALCLONE_IO_LOCK
{
    PDEVICE_OBJECT  DeviceObject;       // our device object
    KEVENT          StallCompleteEvent; // io stalled event
    LIST_ENTRY      StallIrpList;       // stalled irps
    KSPIN_LOCK      IoLock;             // spin lock to syncronize io with stall/unstall
    LONG            StallCount;         // number of times stall was requested
    LONG            ActiveIrpCount;     // number of oustanding, not-stalled IRPs
    NTSTATUS        ErrorStatus;
    PIRP            CurrentIrp;         // used by unstall code
} SERIALCLONE_IO_LOCK, *PSERIALCLONE_IO_LOCK;

typedef struct _SERIALCLONE_DATA
{
    UNICODE_STRING      RegistryPath;
    ULONG               InstanceCount;
} SERIALCLONE_DATA, *PSERIALCLONE_DATA;

extern SERIALCLONE_DATA g_Data;

// PnP states
typedef enum _SERIALCLONE_PNP_STATE 
{
    PnpStateNotStarted = 0,
    PnpStateStarted,
    PnpStateStopPending,
    PnpStateStopped,
    PnpStateRemovePending,
    PnpStateRemoved,
    PnpStateSurpriseRemoved
} SERIALCLONE_PNP_STATE;

typedef struct _SERIALCLONE_IRP_STATUS
{
	PIRP		Irp;
	ULONG		RequestedSize;		// Initial request size
	ULONG		Size;				// size actually passed along after adjustments
	ULONG		Status;				// Pending - irp has been issued
									// Waiting - Irp is waiting for previous request
	KIRQL  			SpunIRQ;
	LIST_ENTRY	link;				// list support
} SERIALCLONE_IRP_STATUS, *PSERIALCLONE_IRP_STATUS;

#define READWAITING	1
#define READPENDING 2

typedef struct _SCFIFO 
{
	KSPIN_LOCK FifoLock;
	KIRQL  			SpunIRQ;

	char	* Buffer;	// base pointer to buffer
	ULONG	BuffSize;	// Size of total buffer
	char	* End;		// pointer to last byte
	char	* In;		// pointer to incomming
	char	* Out;		// pointer to outgoing
	ULONG	Size;		// number of characters in buffer
} SCFIFO,*PSCFIFO;

typedef enum _SERIALCLONE_OPEN_STATE 
{
    OpenStateClosed = 0,
    OpenStateCreate,
    OpenStateReading,
    OpenStateReadPaused,
} SERIALCLONE_OPEN_STATE;

// The device extension for the device object
typedef struct _SERIALCLONE_DEVICE_EXTENSION
{
	ULONG					TypeFlag;				// 0001 if filter, 0002 if clone
	ULONG					OpenState;
    PDEVICE_OBJECT          FDeviceObject;           // pointer to the Filter DeviceObject
    PDEVICE_OBJECT          CDeviceObject;           // pointer to the Clone DeviceObject
    
	PDEVICE_OBJECT          PhysicalDeviceObject;   // underlying PDO
    PDEVICE_OBJECT          LowerDeviceObject;      // top of the device stack

    LONG                    RemoveCount;            // 1-based reference count
    KEVENT                  RemoveEvent;            // event to sync device removal

    SERIALCLONE_PNP_STATE   PnpState;               // PnP state variable
    SERIALCLONE_PNP_STATE   PreviousPnpState;       // Previous PnP state variable
    
	UNICODE_STRING          ntDeviceName;
    UNICODE_STRING          InterfaceName;
    UNICODE_STRING          ntDosDeviceName;
	DEVICE_CAPABILITIES		devcaps;				// copy of most recent device capabilities
    LONG                    OpenHandleCount;
	ULONG					Owner;					// ID of device that did the open 
    KSPIN_LOCK				ListLock;
	KIRQL  					SpunListIRQ;
	LIST_ENTRY				Reads;			// list of waiting irp's
	NPAGED_LOOKASIDE_LIST	LookasideBuffer;
	struct	_SCFIFO			ReadBuffer;
	struct _SERIALCLONE_DEVICE_EXTENSION *	Extension ; // pointer to others extension (clone or filter) 

} SERIALCLONE_DEVICE_EXTENSION, *PSERIALCLONE_DEVICE_EXTENSION;

#define ISFILTER 0001
#define ISCLONE 0002

#ifdef __cplusplus
extern "C" {
#endif

// prototype for DriverEntry function
NTSTATUS __stdcall DriverEntry(
    IN  PDRIVER_OBJECT  DriverObject,
    IN  PUNICODE_STRING RegistryPath
    );

NTSTATUS __stdcall SerialCloneAddDevice(
    IN  PDRIVER_OBJECT  DriverObject,
    IN  PDEVICE_OBJECT  PhysicalDeviceObject
    );

VOID __stdcall SerialCloneUnload(
    IN  PDRIVER_OBJECT  DriverObject
    );

NTSTATUS __stdcall SerialClonePassThrough(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );

NTSTATUS __stdcall SerialCloneSubmitIrpSyncComplete(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp,
    IN  PVOID           Context
    );

NTSTATUS __stdcall SerialClonePnpDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );

NTSTATUS __stdcall SerialClonePowerDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );

NTSTATUS __stdcall SerialCloneDeviceIoControlDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );

NTSTATUS __stdcall SerialCloneInternalDeviceIoControlDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );

NTSTATUS __stdcall SerialCloneCreateDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );

NTSTATUS __stdcall SerialCloneCloseDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );

NTSTATUS __stdcall SerialCloneReadDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );

NTSTATUS __stdcall SerialCloneWriteDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );

NTSTATUS __stdcall SerialCloneCleanupDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );

NTSTATUS __stdcall SerialCloneSystemControlDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );


NTSTATUS SerialCloneSubmitIrpSync(IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP	Irp );

BOOLEAN SerialCloneAcquireRemoveLock(
	IN  PSERIALCLONE_DEVICE_EXTENSION    DeviceExtension);

VOID SerialCloneReleaseRemoveLock(
    IN  PSERIALCLONE_DEVICE_EXTENSION    DeviceExtension);

VOID SerialCloneWaitForSafeRemove(
    IN  PSERIALCLONE_DEVICE_EXTENSION    DeviceExtension);

NTSTATUS ForwardAndWait(IN PDEVICE_OBJECT fdo, IN PIRP Irp);

NTSTATUS OnRequestComplete(IN PDEVICE_OBJECT fdo, IN PIRP Irp, IN PKEVENT pev);

NTSTATUS CompleteRequest(IN PIRP Irp, IN NTSTATUS status, IN ULONG_PTR info);

NTSTATUS RepeatRequest(PDEVICE_OBJECT pdo, PIRP Irp);

NTSTATUS SucceedRequest(PDEVICE_OBJECT pdo, PIRP Irp);

NTSTATUS IgnoreRequest(PDEVICE_OBJECT pdo, PIRP Irp);

NTSTATUS FailRequest(PDEVICE_OBJECT pdo, PIRP Irp,NTSTATUS err);


NTSTATUS ClonePnpDispatch(IN PDEVICE_OBJECT   DeviceObject,
	IN PIRP	Irp);
NTSTATUS FilterPnpDispatch(IN PDEVICE_OBJECT   DeviceObject,
		IN PIRP	Irp);

NTSTATUS ClonePowerDispatch(IN PDEVICE_OBJECT   DeviceObject,
		IN PIRP	Irp);
NTSTATUS FilterPowerDispatch(IN PDEVICE_OBJECT   DeviceObject,
		IN PIRP	Irp);

NTSTATUS __stdcall FilterDeviceIoControlDispatch(IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP   Irp );
NTSTATUS __stdcall CloneDeviceIoControlDispatch(IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP  Irp );

NTSTATUS __stdcall FilterInternalDeviceIoControlDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );
NTSTATUS __stdcall CloneInternalDeviceIoControlDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );

NTSTATUS __stdcall FilterCreateDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );
NTSTATUS __stdcall CloneCreateDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );

NTSTATUS __stdcall FilterCloseDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );
NTSTATUS __stdcall CloneCloseDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );

NTSTATUS __stdcall FilterReadDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );
NTSTATUS __stdcall CloneReadDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );

NTSTATUS __stdcall FilterWriteDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );
NTSTATUS __stdcall CloneWriteDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );

NTSTATUS __stdcall FilterCleanupDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );
NTSTATUS __stdcall CloneCleanupDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );

NTSTATUS __stdcall FilterSystemControlDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );
NTSTATUS __stdcall CloneSystemControlDispatch(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );

void SCFifoInit(PSCFIFO  fifo, char * buffer, ULONG size);
NTSTATUS SCFifoWrite(PSCFIFO  fifo, char * src, ULONG size);
NTSTATUS SCFifoRead(PSCFIFO  fifo, char * dest, ULONG size,ULONG * rsltSize);
ULONG GetPendingSize(LIST_ENTRY * list);
#ifdef __cplusplus
}
#endif
///////////////////////////////////////////////////////////////////////////////////////////////////
// Debug
///////////////////////////////////////////////////////////////////////////////////////////////////

// definition of debug levels

#define DBG_NONE            0
#define DBG_ERR             1
#define DBG_WARN            2
#define DBG_TRACE           3
#define DBG_INFO            4
#define DBG_VERB            5

#ifdef SERIALCLONE_WMI_TRACE

/*
tracepdb -f objchk_wxp_x86\i386\SerialClone.pdb -p C:\SerialClone
SET TRACE_FORMAT_SEARCH_PATH=C:\SerialClone

tracelog -start SerialClone -guid SerialClone.ctl -f SerialClone.log -flags 0x7FFFFFFF -level 5
tracelog -stop SerialClone

tracefmt -o SerialClone.txt -f SerialClone.log
*/

#define WPP_AREA_LEVEL_LOGGER(Area,Lvl)           WPP_LEVEL_LOGGER(Area)
#define WPP_AREA_LEVEL_ENABLED(Area,Lvl)          (WPP_LEVEL_ENABLED(Area) && WPP_CONTROL(WPP_BIT_##Area).Level >= Lvl)

#define WPP_CONTROL_GUIDS \
    WPP_DEFINE_CONTROL_GUID(SerialClone,(7CD765FA,DA15,43C0,8E60,1CB9DBF1E923), \
        WPP_DEFINE_BIT(DBG_GENERAL)                 /* bit  0 = 0x00000001 */ \
        WPP_DEFINE_BIT(DBG_PNP)                     /* bit  1 = 0x00000002 */ \
        WPP_DEFINE_BIT(DBG_POWER)                   /* bit  2 = 0x00000004 */ \
        WPP_DEFINE_BIT(DBG_COUNT)                   /* bit  3 = 0x00000008 */ \
        WPP_DEFINE_BIT(DBG_CREATECLOSE)             /* bit  4 = 0x00000010 */ \
        WPP_DEFINE_BIT(DBG_WMI)                     /* bit  5 = 0x00000020 */ \
        WPP_DEFINE_BIT(DBG_UNLOAD)                  /* bit  6 = 0x00000040 */ \
        WPP_DEFINE_BIT(DBG_IO)                      /* bit  7 = 0x00000080 */ \
        WPP_DEFINE_BIT(DBG_INIT)                    /* bit  8 = 0x00000100 */ \
        WPP_DEFINE_BIT(DBG_09)                      /* bit  9 = 0x00000200 */ \
        WPP_DEFINE_BIT(DBG_10)                      /* bit 10 = 0x00000400 */ \
        WPP_DEFINE_BIT(DBG_11)                      /* bit 11 = 0x00000800 */ \
        WPP_DEFINE_BIT(DBG_12)                      /* bit 12 = 0x00001000 */ \
        WPP_DEFINE_BIT(DBG_13)                      /* bit 13 = 0x00002000 */ \
        WPP_DEFINE_BIT(DBG_14)                      /* bit 14 = 0x00004000 */ \
        WPP_DEFINE_BIT(DBG_15)                      /* bit 15 = 0x00008000 */ \
        WPP_DEFINE_BIT(DBG_16)                      /* bit 16 = 0x00010000 */ \
        WPP_DEFINE_BIT(DBG_17)                      /* bit 17 = 0x00020000 */ \
        WPP_DEFINE_BIT(DBG_18)                      /* bit 18 = 0x00040000 */ \
        WPP_DEFINE_BIT(DBG_19)                      /* bit 19 = 0x00080000 */ \
        WPP_DEFINE_BIT(DBG_20)                      /* bit 20 = 0x00100000 */ \
        WPP_DEFINE_BIT(DBG_21)                      /* bit 21 = 0x00200000 */ \
        WPP_DEFINE_BIT(DBG_22)                      /* bit 22 = 0x00400000 */ \
        WPP_DEFINE_BIT(DBG_23)                      /* bit 23 = 0x00800000 */ \
        WPP_DEFINE_BIT(DBG_24)                      /* bit 24 = 0x01000000 */ \
        WPP_DEFINE_BIT(DBG_25)                      /* bit 25 = 0x02000000 */ \
        WPP_DEFINE_BIT(DBG_26)                      /* bit 26 = 0x04000000 */ \
        WPP_DEFINE_BIT(DBG_27)                      /* bit 27 = 0x08000000 */ \
        WPP_DEFINE_BIT(DBG_28)                      /* bit 28 = 0x10000000 */ \
        WPP_DEFINE_BIT(DBG_29)                      /* bit 29 = 0x20000000 */ \
        WPP_DEFINE_BIT(DBG_30)                      /* bit 30 = 0x40000000 */ \
        WPP_DEFINE_BIT(DBG_31)                      /* bit 31 = 0x80000000 */ \
        )

__inline VOID SerialCloneDumpIrp(
    IN PIRP Irp
    )
{
}

__inline PCHAR SystemPowerStateString(
    IN  SYSTEM_POWER_STATE  SystemState
    )
{
    return "";
}

__inline PCHAR DevicePowerStateString(
    IN  DEVICE_POWER_STATE  DeviceState
    )
{
    return "";
}

#else

// definition of debug areas

#define DBG_GENERAL         (1 << 0)
#define DBG_PNP             (1 << 1)
#define DBG_POWER           (1 << 2)
#define DBG_COUNT           (1 << 3)
#define DBG_CREATECLOSE     (1 << 4)
#define DBG_WMI             (1 << 5)
#define DBG_UNLOAD          (1 << 6)
#define DBG_IO              (1 << 7)
#define DBG_INIT            (1 << 8)

#define DBG_ALL             0xFFFFFFFF

#if DBG

VOID SerialCloneDebugPrint(
    IN ULONG    Area,
    IN ULONG    Level,
    IN PCCHAR   Format,
    IN          ...
    );

VOID SerialCloneDumpIrp(
    IN PIRP Irp
    );
NTSTATUS SerialCloneCreateComName(
    IN  PSERIALCLONE_DEVICE_EXTENSION   DeviceExtension
	);
PCHAR IrpMajorFunctionString(
    IN  UCHAR MajorFunction
    );

PCHAR PnPMinorFunctionString(
    IN  UCHAR   MinorFunction
    );

PCHAR PowerMinorFunctionString(
    IN  UCHAR   MinorFunction
    );

PCHAR SystemPowerStateString(
    IN  SYSTEM_POWER_STATE  SystemState
    );

PCHAR DevicePowerStateString(
    IN  DEVICE_POWER_STATE  DeviceState
    );

PCHAR WMIMinorFunctionString (
    IN  UCHAR MinorFunction
    );

#else	// !DBG

__inline VOID SerialCloneDebugPrint(
    IN ULONG    Area,
    IN ULONG    Level,
    IN PCCHAR   Format,
    IN          ...
    )
{
}

#define SerialCloneDumpIrp(Irp)
#define IrpMajorFunctionString(MajorFunction)
#define PnPMinorFunctionString(MinorFunction)
#define PowerMinorFunctionString(MinorFunction)
#define SystemPowerStateString(SystemState) 0
#define DevicePowerStateString(DeviceState) 0
#define WMIMinorFunctionString(MinorFunction)
#define SerialCloneTdiDumpAddress(Address)

#endif	// DBG
#endif	// SERIALCLONE_WMI_TRACE

///////////////////////////////////////////////////////////////////////////////////////////////////
// Queue Functions
///////////////////////////////////////////////////////////////////////////////////////////////////

VOID SerialCloneInitializeQueue(
    IN  PSERIALCLONE_QUEUE    QueueExtension,
    IN  PSERIALCLONE_QUEUE_STARTIO     StartIoRoutine,
    IN  PDEVICE_OBJECT      DeviceObject,
    IN  BOOLEAN             bUseSerialCloneStartIoDpc
    );

NTSTATUS SerialCloneQueueIrp(
    IN  PSERIALCLONE_QUEUE    QueueExtension,
    IN  PIRP                Irp
    );

VOID SerialCloneStartNext(
    IN  PSERIALCLONE_QUEUE    QueueExtension
    );

VOID SerialCloneFlushQueue(
    IN  PSERIALCLONE_QUEUE    QueueExtension,
    IN  PFILE_OBJECT        FileObject
    );

VOID SerialCloneInvalidateQueue(
    IN  PSERIALCLONE_QUEUE    Queue,
    IN  NTSTATUS                  ErrorStatus
    );

VOID SerialClonePauseQueue(
    IN  PSERIALCLONE_QUEUE    QueueExtension
    );
    
VOID SerialCloneRestartQueue(
    IN  PSERIALCLONE_QUEUE    QueueExtension
    );

VOID SerialCloneStartIoDpc(
    IN  PKDPC       Dpc,
    IN  PVOID       Context,
    IN  PVOID       Unused1,
    IN  PVOID       Unused2
    );

VOID SerialCloneQueueCancelRoutine(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );

///////////////////////////////////////////////////////////////////////////////////////////////////
// List functions
///////////////////////////////////////////////////////////////////////////////////////////////////

VOID SerialCloneInitializeList(
    IN  PSERIALCLONE_LIST   List,
    IN  PDEVICE_OBJECT          DeviceObject
    );

NTSTATUS SerialCloneInsertHead(
    IN  PSERIALCLONE_LIST   List, 
    IN  PIRP                Irp
    );

NTSTATUS SerialCloneInsertTail(
    IN  PSERIALCLONE_LIST   List, 
    IN  PIRP                Irp
    );

PIRP SerialCloneRemoveHead(
    IN  PSERIALCLONE_LIST   List
    );

PIRP SerialCloneRemoveTail(
    IN  PSERIALCLONE_LIST   List
    );

VOID SerialCloneFlushList(
    IN  PSERIALCLONE_LIST   List,
    IN  PFILE_OBJECT        FileObject
    );

VOID SerialCloneInvalidateList(
    IN  PSERIALCLONE_LIST   List,
    IN  NTSTATUS                ErrorStatus
    );

VOID SerialCloneListCancelRoutine(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );

///////////////////////////////////////////////////////////////////////////////////////////////////
// SERIALCLONE_IO_LOCK
///////////////////////////////////////////////////////////////////////////////////////////////////

VOID SerialCloneInitializeIoLock(
    IN  PSERIALCLONE_IO_LOCK    IoLock, 
    IN  PDEVICE_OBJECT              DeviceObject
    );

NTSTATUS SerialCloneCheckIoLock(
    IN  PSERIALCLONE_IO_LOCK    IoLock, 
    IN  PIRP                        Irp
    );

VOID SerialClonePendingIoCancelRoutine(
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    );

NTSTATUS SerialCloneIncrementIoCount(
    IN  PSERIALCLONE_IO_LOCK    IoLock
    );

VOID SerialCloneDecrementIoCount(
    IN  PSERIALCLONE_IO_LOCK    IoLock
    );

VOID SerialCloneLockIo(
    IN  PSERIALCLONE_IO_LOCK    IoLock
    );

VOID SerialCloneWaitForStopIo(
    IN  PSERIALCLONE_IO_LOCK    IoLock
    );

VOID SerialCloneUnlockIo(
    IN  PSERIALCLONE_IO_LOCK    IoLock
    );

VOID SerialCloneFlushPendingIo(
    IN  PSERIALCLONE_IO_LOCK    IoLock,
    IN  PFILE_OBJECT                FileObject
    );

VOID SerialCloneInvalidateIo(
    IN  PSERIALCLONE_IO_LOCK    IoLock,
    IN  NTSTATUS                    ErrorStatus
    );

///////////////////////////////////////////////////////////////////////////////////////////////////
// Registry
///////////////////////////////////////////////////////////////////////////////////////////////////

PVOID SerialCloneRegQueryValueKey(
    IN  HANDLE  RegKeyHandle,
    IN  PWSTR   SubKeyName,
    IN  PWSTR   ValueName,
    OUT PULONG  Length
    );

VOID SerialCloneRegEnumerateKeys(
    IN  HANDLE RegKeyHandle
    );

VOID SerialCloneRegEnumerateValueKeys(
    IN  HANDLE  RegKeyHandle
    );

#endif  // __SERIALCLONE_H__

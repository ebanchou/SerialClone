// test6CoInst.cpp : Device instance specific co-installer that can add property pages.
//
// Generated by C DriverWizard 3.2.0 (Build 2485)
// Requires DDK Only
// File created on 10/4/2005
//

#include <windows.h>
#include <initguid.h>
#include <setupapi.h>
#include <stdio.h>
#include <tchar.h>
#include "resource.h"
#include "..\intrface.h"
#include "SCDevEnum.h"

DEFINE_GUID(GUID_CLASS_PORT, 0x4d36e978, 0x0e325, 0x11ce, 0x08, 0xe4, 0x08,
            0x00, 0x2b, 0x0e1, 0x03, 0x18);

#define SERIALGUIDStr L"{4d36e978-e325-11ce-bfc1-08002be10318}"

#define SERIAL_PNP_ID_STR               L"*PNP0501"

typedef struct _SERIALCLONE_PROP_PARAMS
{
   HDEVINFO                     DeviceInfoSet;
   PSP_DEVINFO_DATA             DeviceInfoData;
} SERIALCLONE_PROP_PARAMS, *PSERIALCLONE_PROP_PARAMS;

HANDLE SerialCloneOpenDevice(
    IN  PSERIALCLONE_PROP_PARAMS    Params
    );

DWORD SerialCloneAddPropertyPage(
    IN  HDEVINFO            DeviceInfoSet,
    IN  PSP_DEVINFO_DATA    DeviceInfoData
    );

INT_PTR SerialClonePropPageDlgProc(
    IN  HWND   hDlg,
    IN  UINT   uMessage,
    IN  WPARAM wParam,
    IN  LPARAM lParam
    );

UINT CALLBACK SerialClonePropPageDlgCallback(
    IN  HWND              hwnd,
    IN  UINT              uMsg,
    IN  LPPROPSHEETPAGE   ppsp
    );

BOOL SerialCloneOnNotify(
    IN  HWND              ParentHwnd,
    IN  LPNMHDR           NmHdr,
    IN  PSERIALCLONE_PROP_PARAMS Params
    );

///////////////////////////////////////////////////////////////////////////////////////////////////
//  SerialCloneDebugPrint
//      method to output text to debugger
//
//  Arguments:
//      IN  Format
//              Text format to print to debugger
//
//  Return Value:
//      None.
//
VOID SerialCloneDebugPrint(LPCTSTR Format, ...)
{
    TCHAR       str[256];
    va_list     vaList;

    va_start(vaList, Format);

    _vstprintf(str, Format, vaList);

    OutputDebugString(_T("SERIALCLONECOINST: "));
    OutputDebugString(str);

    va_end(vaList);

    return;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//  SerialCloneCoInstaller
//      Responds to co-installer messages, adds custom property page
//
//  Arguments:
//      IN  InstallFunction
//              Install message
//
//      IN  DeviceInfoSet
//              Handle to device info set
//
//      IN  DeviceInfoData
//              Handle to device data
//
//      IN OUT Context
//              coinstaller context
//
//  Returns:
//      status
//
HRESULT SerialCloneCoInstaller(
    IN  DI_FUNCTION                     InstallFunction,
    IN  HDEVINFO                        DeviceInfoSet,
    IN  PSP_DEVINFO_DATA                DeviceInfoData,
    IN OUT  PCOINSTALLER_CONTEXT_DATA   Context
    )
{
  switch (InstallFunction)
    {
    case DIF_INSTALLDEVICE:
		{
			TCHAR       FriendlyName[30];
			DWORD       dwBuffSz,dwRegType;
			HDEVINFO	hComPort;
			SP_DEVINFO_DATA  CommDeviceData;
			BOOL        fSuccess=FALSE;

			SerialCloneDebugPrint(_T("DIF_INSTALLDEVICE\n"));
			DisableThreadLibraryCalls(GetModuleHandle(_T("SerialCloneCoInst.dll")));
			InitCommonControls();

			// get Device Inso Set for the serial device

			FindDevices(DIGCF_PRESENT,_T("*PNP05*" ));

			//hComPort =  SetupDiGetClassDevs( &GUID_DEVINTERFACE_SERIALCLONE,NULL,0,DIGCF_PRESENT );

			//if(hComPort!=INVALID_HANDLE_VALUE )
			//{

			//}

		}
        break;

    case DIF_REMOVE:
        SerialCloneDebugPrint(_T("DIF_REMOVE\n"));
        break;

    case DIF_SELECTDEVICE:
        SerialCloneDebugPrint(_T("DIF_SELECTDEVICE\n"));
        break;

    case DIF_ASSIGNRESOURCES:
        SerialCloneDebugPrint(_T("DIF_ASSIGNRESOURCES\n"));
        break;

    case DIF_PROPERTIES:
        SerialCloneDebugPrint(_T("DIF_PROPERTIES\n"));
        break;

    case DIF_FIRSTTIMESETUP:
        SerialCloneDebugPrint(_T("DIF_FIRSTTIMESETUP\n"));
        break;

    case DIF_FOUNDDEVICE:
        SerialCloneDebugPrint(_T("DIF_FOUNDDEVICE\n"));
        break;

    case DIF_SELECTCLASSDRIVERS:
        SerialCloneDebugPrint(_T("DIF_SELECTCLASSDRIVERS\n"));
        break;

    case DIF_VALIDATECLASSDRIVERS:
        SerialCloneDebugPrint(_T("DIF_VALIDATECLASSDRIVERS\n"));
        break;

    case DIF_INSTALLCLASSDRIVERS:
        SerialCloneDebugPrint(_T("DIF_INSTALLCLASSDRIVERS\n"));
        break;

    case DIF_CALCDISKSPACE:
        SerialCloneDebugPrint(_T("DIF_CALCDISKSPACE\n"));
        break;

    case DIF_DESTROYPRIVATEDATA:
        SerialCloneDebugPrint(_T("DIF_DESTROYPRIVATEDATA\n"));
        break;

    case DIF_VALIDATEDRIVER:
        SerialCloneDebugPrint(_T("DIF_VALIDATEDRIVER\n"));
        break;

    case DIF_MOVEDEVICE:
        SerialCloneDebugPrint(_T("DIF_MOVEDEVICE\n"));
        break;

    case DIF_DETECT:
        SerialCloneDebugPrint(_T("DIF_DETECT\n"));
        break;

    case DIF_INSTALLWIZARD:
        SerialCloneDebugPrint(_T("DIF_INSTALLWIZARD\n"));
        break;

    case DIF_DESTROYWIZARDDATA:
        SerialCloneDebugPrint(_T("DIF_DESTROYWIZARDDATA\n"));
        break;

    case DIF_PROPERTYCHANGE:
        SerialCloneDebugPrint(_T("DIF_PROPERTYCHANGE\n"));
        break;

    case DIF_ENABLECLASS:
        SerialCloneDebugPrint(_T("DIF_ENABLECLASS\n"));
        break;

    case DIF_DETECTVERIFY:
        SerialCloneDebugPrint(_T("DIF_DETECTVERIFY\n"));
        break;

    case DIF_INSTALLDEVICEFILES:
        SerialCloneDebugPrint(_T("DIF_INSTALLDEVICEFILES\n"));
        break;

    case DIF_ALLOW_INSTALL:
        SerialCloneDebugPrint(_T("DIF_ALLOW_INSTALL\n"));
        break;

    case DIF_SELECTBESTCOMPATDRV:
        SerialCloneDebugPrint(_T("DIF_SELECTBESTCOMPATDRV\n"));
        break;

    case DIF_REGISTERDEVICE:
        SerialCloneDebugPrint(_T("DIF_REGISTERDEVICE\n"));
        break;

    case DIF_NEWDEVICEWIZARD_PRESELECT:
        SerialCloneDebugPrint(_T("DIF_NEWDEVICEWIZARD_PRESELECT\n"));
        break;

    case DIF_NEWDEVICEWIZARD_SELECT:
        SerialCloneDebugPrint(_T("DIF_NEWDEVICEWIZARD_SELECT\n"));
        break;

    case DIF_NEWDEVICEWIZARD_PREANALYZE:
        SerialCloneDebugPrint(_T("DIF_NEWDEVICEWIZARD_PREANALYZE\n"));
        break;

    case DIF_NEWDEVICEWIZARD_POSTANALYZE:
        SerialCloneDebugPrint(_T("DIF_NEWDEVICEWIZARD_POSTANALYZE\n"));
        break;

    case DIF_NEWDEVICEWIZARD_FINISHINSTALL:
        SerialCloneDebugPrint(_T("DIF_NEWDEVICEWIZARD_FINISHINSTALL\n"));
        break;

    case DIF_INSTALLINTERFACES:
        SerialCloneDebugPrint(_T("DIF_INSTALLINTERFACES\n"));
        break;

    case DIF_DETECTCANCEL:
        SerialCloneDebugPrint(_T("DIF_DETECTCANCEL\n"));
        break;

    case DIF_REGISTER_COINSTALLERS:
        SerialCloneDebugPrint(_T("DIF_REGISTER_COINSTALLERS\n"));
        break;

    case DIF_ADDPROPERTYPAGE_ADVANCED:
        SerialCloneDebugPrint(_T("DIF_ADDPROPERTYPAGE_ADVANCED\n"));

        return SerialCloneAddPropertyPage(DeviceInfoSet, DeviceInfoData);

        break;

    case DIF_ADDPROPERTYPAGE_BASIC:
        SerialCloneDebugPrint(_T("DIF_ADDPROPERTYPAGE_BASIC\n"));
        break;

    case DIF_TROUBLESHOOTER:
        SerialCloneDebugPrint(_T("DIF_TROUBLESHOOTER\n"));
        break;

    case DIF_POWERMESSAGEWAKE:
        SerialCloneDebugPrint(_T("DIF_POWERMESSAGEWAKE\n"));
        break;

    default:
        SerialCloneDebugPrint(_T("Unknown CoInstaller Message\n"));
        break;
    }

    return NO_ERROR;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//  SerialCloneOpenDevice
//      opens handle to a device
//
//  Arguments:
//      IN  Params
//              device parameters
//
//  Returns:
//      Handle
//
HANDLE SerialCloneOpenDevice(
    IN  PSERIALCLONE_PROP_PARAMS    Params
    )
{
    HANDLE                              hDevice;
    HDEVINFO                            hDevInfo;
    SP_DEVICE_INTERFACE_DATA            interfaceData;
    TCHAR                               devInst[500];
    PSP_DEVICE_INTERFACE_DETAIL_DATA    pInterfaceDetailData;
    ULONG                               length;

    // Get the device instance
    if (!SetupDiGetDeviceInstanceId(
            Params->DeviceInfoSet,
            Params->DeviceInfoData,
            devInst,
            500,
            NULL))
    {
        SerialCloneDebugPrint(_T("SetupDiGetDeviceInstanceId failed, Error: %d\n"), GetLastError());

        return INVALID_HANDLE_VALUE;
    }

    hDevInfo = SetupDiGetClassDevs(
                    (CONST LPGUID)&GUID_DEVINTERFACE_SERIALCLONE,
                    devInst,
                    NULL,
                    DIGCF_DEVICEINTERFACE | DIGCF_PRESENT
                    );

    if (hDevInfo == INVALID_HANDLE_VALUE)
    {
        SerialCloneDebugPrint(_T("SetupDiGetClassDevs failed, Error: %d\n"), GetLastError());

        return INVALID_HANDLE_VALUE;
    }

    interfaceData.cbSize = sizeof(SP_DEVICE_INTERFACE_DATA);

    if (!SetupDiEnumDeviceInterfaces(
                    hDevInfo,
                    NULL,
                    (CONST LPGUID) &GUID_DEVINTERFACE_SERIALCLONE,
                    0,
                    &interfaceData))
    {
        SerialCloneDebugPrint(_T("SetupDiEnumDeviceInterfaces failed, Error: %d\n"), GetLastError());
        SetupDiDestroyDeviceInfoList(hDevInfo);

        return INVALID_HANDLE_VALUE;
    }

    SetupDiGetDeviceInterfaceDetail(
            hDevInfo,
            &interfaceData,
            NULL,
            0,
            &length,
            NULL
            );

    if (GetLastError() != ERROR_INSUFFICIENT_BUFFER)
    {
        SerialCloneDebugPrint(_T("SetupDiGetDeviceInterfaceDetail failed 1, Error: %d\n"), GetLastError());
        SetupDiDestroyDeviceInfoList(hDevInfo);

        return INVALID_HANDLE_VALUE;
    }

    pInterfaceDetailData = (PSP_DEVICE_INTERFACE_DETAIL_DATA)HeapAlloc(GetProcessHeap(), 0, length);
    if (pInterfaceDetailData == NULL)
    {
        SerialCloneDebugPrint(_T("Failed to allocate SP_DEVICE_INTERFACE_DETAIL_DATA buffer\n"));
        SetupDiDestroyDeviceInfoList(hDevInfo);

        return INVALID_HANDLE_VALUE;
    }

    pInterfaceDetailData->cbSize = sizeof(SP_DEVICE_INTERFACE_DETAIL_DATA);

    if (!SetupDiGetDeviceInterfaceDetail(
            hDevInfo,
            &interfaceData,
            pInterfaceDetailData,
            length,
            NULL,
            NULL))
    {
        SerialCloneDebugPrint(_T("SetupDiGetDeviceInterfaceDetail failed 2, Error: %d\n"), GetLastError());

        SetupDiDestroyDeviceInfoList(hDevInfo);

        HeapFree(GetProcessHeap(), 0, pInterfaceDetailData);
        return INVALID_HANDLE_VALUE;
    }

    hDevice = CreateFile(
                pInterfaceDetailData->DevicePath,
                GENERIC_READ | GENERIC_WRITE,
                FILE_SHARE_READ | FILE_SHARE_WRITE,
                NULL,
                OPEN_EXISTING,
                FILE_ATTRIBUTE_NORMAL,
                NULL
                );

    if (hDevice == INVALID_HANDLE_VALUE)
    {
        SerialCloneDebugPrint(_T("CreateFile failed, Error: %d\n"), GetLastError());
    }

    HeapFree(GetProcessHeap(), 0, pInterfaceDetailData);
    SetupDiDestroyDeviceInfoList(hDevInfo);

    return hDevice;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//  SerialCloneAddPropertyPage
//      Entry-point for adding additional device manager property
//      sheet pages.
//
//  Arguments:
//      IN  DeviceInfoSet
//              Handle to device info set
//
//      IN  DeviceInfoData
//              Handle to device data
//
//  Returns:
//      status
//
DWORD SerialCloneAddPropertyPage(
    HDEVINFO            DeviceInfoSet,
    PSP_DEVINFO_DATA    DeviceInfoData
    )

{
    HPROPSHEETPAGE          pageHandle;
    PROPSHEETPAGE           page;
    PSERIALCLONE_PROP_PARAMS       params = NULL;
    SP_ADDPROPERTYPAGE_DATA AddPropertyPageData = {0};

    SerialCloneDebugPrint(_T("SerialCloneAddPropertyPage++\n"));

    // DeviceInfoSet is NULL if setup is requesting property pages for
    // the device setup class. We don't want to do anything in this
    // case.
    if (DeviceInfoData == NULL)
    {
        SerialCloneDebugPrint(_T("DeviceInfoData was NULL returning ERROR_DI_DO_DEFAULT\n"));
        return ERROR_DI_DO_DEFAULT;
    }

    AddPropertyPageData.ClassInstallHeader.cbSize =
        sizeof(SP_CLASSINSTALL_HEADER);

    // Get the current class install parameters for the device
    if (SetupDiGetClassInstallParams(
            DeviceInfoSet,
            DeviceInfoData,
            (PSP_CLASSINSTALL_HEADER)&AddPropertyPageData,
            sizeof(SP_ADDPROPERTYPAGE_DATA),
            NULL))
    {
        // Ensure that the maximum number of dynamic pages for the
        // device has not yet been met
        if (AddPropertyPageData.NumDynamicPages >= MAX_INSTALLWIZARD_DYNAPAGES)
        {
            SerialCloneDebugPrint(_T("Number of dynamic pages exceeded for this device, returning  NO_ERROR\n"));
            return NO_ERROR;
        }

        params = (PSERIALCLONE_PROP_PARAMS)HeapAlloc(GetProcessHeap(), 0, sizeof(SERIALCLONE_PROP_PARAMS));
        if (params)
        {
            // Save DeviceInfoSet and DeviceInfoData
            params->DeviceInfoSet = DeviceInfoSet;
            params->DeviceInfoData = DeviceInfoData;

            // Create custom property sheet page
            ZeroMemory(&page, sizeof(PROPSHEETPAGE));
            page.dwSize = sizeof(PROPSHEETPAGE);
            page.dwFlags = PSP_USECALLBACK;
            page.hInstance = GetModuleHandle(_T("SerialCloneCoInst.dll"));
            page.pszTemplate = MAKEINTRESOURCE(IDD_COINST_DIALOG);
            page.pfnDlgProc = (DLGPROC)SerialClonePropPageDlgProc;
            page.pfnCallback = SerialClonePropPageDlgCallback;

            page.lParam = (LPARAM)params;

            SerialCloneDebugPrint(_T("Calling CreatePropertySheetPage\n"));

            pageHandle = CreatePropertySheetPage(&page);
            if (!pageHandle)
            {
                HeapFree(GetProcessHeap(), 0, params);
                SerialCloneDebugPrint(_T("CreatePropertySheetPage failed, returning  NO_ERROR\n"));
                return NO_ERROR;
            }

            // Add the new page to the list of dynamic property
            // sheets
            AddPropertyPageData.DynamicPages[AddPropertyPageData.NumDynamicPages++] = pageHandle;

            SetupDiSetClassInstallParams(
                DeviceInfoSet,
                DeviceInfoData,
                (PSP_CLASSINSTALL_HEADER)&AddPropertyPageData,
                sizeof(SP_ADDPROPERTYPAGE_DATA)
                );
        }
        else
        {
            SerialCloneDebugPrint(_T("Where are my params??\n"));
        }
    }
    else
    {
        SerialCloneDebugPrint(_T("Something fouled up here!!\n"));
    }

    SerialCloneDebugPrint(_T("SerialCloneAddPropertyPage--\n"));

    return NO_ERROR;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//  SerialClonePropPageDlgProc
//      Entry-point for adding additional device manager property
//      sheet pages.
//
//  Arguments:
//      IN  hDlg
//              Handle to our window
//
//      IN  uMessage
//              window message
//
//      IN  wParam
//              WPARAM
//
//      IN  lParam
//              LPARAM
//
//  Returns:
//      status
//
INT_PTR SerialClonePropPageDlgProc(
    IN  HWND   hDlg,
    IN  UINT   uMessage,
    IN  WPARAM wParam,
    IN  LPARAM lParam
    )
{
    PSERIALCLONE_PROP_PARAMS   params;

    SerialCloneDebugPrint(_T("SerialClonePropPageDlgProc++\n"));

    params = (PSERIALCLONE_PROP_PARAMS) GetWindowLongPtr(hDlg, DWLP_USER);

    switch (uMessage)
    {
    case WM_COMMAND:

        SerialCloneDebugPrint(_T("SerialClonePropPageDlgProc WM_COMMAND\n"));

        switch (LOWORD(wParam))
        {
        case 0:
            break;
        default:
            break;
        }
        break;

    case WM_CONTEXTMENU:

        SerialCloneDebugPrint(_T("SerialClonePropPageDlgProc WM_CONTEXTMENU\n"));

        break;

    case WM_HELP:

        SerialCloneDebugPrint(_T("SerialClonePropPageDlgProc WM_HELP\n"));

        break;

    case WM_INITDIALOG:

        SerialCloneDebugPrint(_T("SerialClonePropPageDlgProc WM_INITDIALOG\n"));

        // on WM_INITDIALOG call, lParam points to the property
        // sheet page.
        GetDlgItem(hDlg,IDC_CLONE_ENABLE);
		//
        // The lParam field in the property sheet page struct is set by the
        // caller. This was set when we created the property sheet.
        // Save this in the user window long so that we can access it on later
        // on later messages.

        params = (PSERIALCLONE_PROP_PARAMS)((LPPROPSHEETPAGE)lParam)->lParam;
        SetWindowLongPtr(hDlg, DWLP_USER, (LONG_PTR) params);
        break;


    case WM_NOTIFY:

        SerialCloneDebugPrint(_T("SerialClonePropPageDlgProc WM_NOTIFY\n"));

        SerialCloneOnNotify(hDlg, (NMHDR *)lParam, params);
        break;

    default:
        SerialCloneDebugPrint(_T("SerialClonePropPageDlgProc returning FALSE\n"));
        return FALSE;
    }

    SerialCloneDebugPrint(_T("SerialClonePropPageDlgProc--\n"));

    return TRUE;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//  SerialClonePropPageDlgProc
//      Entry-point for adding additional device manager property
//      sheet pages.
//
//  Arguments:
//      IN  hwnd
//              Handle to our window
//
//      IN  uMsg
//              window message
//
//      IN  ppsp
//              additional info
//
//  Returns:
//      status
//
UINT CALLBACK SerialClonePropPageDlgCallback(
    IN  HWND            hwnd,
    IN  UINT            uMsg,
    IN  LPPROPSHEETPAGE ppsp
    )
{
    PSERIALCLONE_PROP_PARAMS    params;

    SerialCloneDebugPrint(_T("SerialClonePropPageDlgCallback++\n"));

    switch (uMsg)
    {

    case PSPCB_CREATE:

        // Called when the property sheet is first displayed
        SerialCloneDebugPrint(_T("SerialClonePropPageDlgCallback PSPCB_CREATE\n"));

        // return TRUE to continue with creation of page
        return TRUE;

    case PSPCB_RELEASE:

        // Called when property page is destroyed, even if the page
        // was never displayed. This is the correct way to release data.
        SerialCloneDebugPrint(_T("SerialClonePropPageDlgCallback PSPCB_RELEASE\n"));

        params = (PSERIALCLONE_PROP_PARAMS)ppsp->lParam;
        LocalFree(params);

        // return value ignored in this case
        return 0;

    case PSPCB_ADDREF:
        SerialCloneDebugPrint(_T("SerialClonePropPageDlgCallback PSPCB_ADDREF\n"));

        SerialCloneDebugPrint(_T("SerialClonePropPageDlgCallback ppsp->pszTemplate = %p\n"), ppsp->pszTemplate);

        return TRUE;

    default:
        SerialCloneDebugPrint(_T("SerialClonePropPageDlgCallback uMsg = %d\n"), uMsg);

        break;
    }

    SerialCloneDebugPrint(_T("SerialClonePropPageDlgCallback--\n"));

    return TRUE;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//  SerialCloneOnNotify
//      Entry-point for adding additional device manager property
//      sheet pages.
//
//  Arguments:
//      IN  ParentHwnd
//              Handle to parent control
//
//      IN  NmHdr
//              notify parameters
//
//      IN  Params
//              our context
//
//  Returns:
//      status
//
BOOL SerialCloneOnNotify(
    IN  HWND              ParentHwnd,
    IN  LPNMHDR           NmHdr,
    IN  PSERIALCLONE_PROP_PARAMS Params
    )
{
    SP_DEVINSTALL_PARAMS    spDevInstall = {0};
    TCHAR                   friendlyName[LINE_LEN] = {0};
    HANDLE                  hDevice;

    SerialCloneDebugPrint(_T("SerialCloneOnNotify++\n"));

    switch (NmHdr->code)
    {

    case PSN_SETACTIVE:

        SerialCloneDebugPrint(_T("SerialCloneOnNotify PSN_SETACTIVE\n"));

        hDevice = SerialCloneOpenDevice(Params);

        if (hDevice == INVALID_HANDLE_VALUE)
        {
            SerialCloneDebugPrint(_T("Failed to open handle to PDO device\n"));
            return FALSE;
        }

        //*****************************************************************
        //*****************************************************************
        // TODO:  If you need to access your device here, you now
        //        have a handle open for DeviceIoControl/ReadFile etc.
        //        PSN_SETACTIVE is called when the custom property page
        //        added by this DLL is made active
        //*****************************************************************
        //*****************************************************************

        CloseHandle(hDevice);

        return TRUE;

    case PSN_APPLY:

        SerialCloneDebugPrint(_T("SerialCloneOnNotify PSN_APPLY\n"));

        hDevice = SerialCloneOpenDevice(Params);

        if (hDevice == INVALID_HANDLE_VALUE)
        {
            SerialCloneDebugPrint(_T("Failed to open handle to PDO device\n"));
            return FALSE;
        }

        //*****************************************************************
        //*****************************************************************
        // TODO:  If you need to access your device here, you now
        //        have a handle open for DeviceIoControl/ReadFile etc.
        //        PSN_APPLY is called when the the user hits the Apply
        //        or OK buttons
        //*****************************************************************
        //*****************************************************************

        CloseHandle(hDevice);

        return TRUE;

    default:
        SerialCloneDebugPrint(_T("SerialCloneOnNotify returning FALSE\n"));
        return FALSE;
    }

    SerialCloneDebugPrint(_T("SerialCloneOnNotify returning FALSE\n"));

    return FALSE;
}
